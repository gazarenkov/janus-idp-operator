---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: backstages.janus-idp.io
spec:
  group: janus-idp.io
  names:
    kind: Backstage
    listKind: BackstageList
    plural: backstages
    singular: backstage
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Backstage is the Schema for the backstages API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: BackstageSpec defines the desired state of Backstage
            properties:
              appConfigs:
                description: References to existing app-configs Config objects. Each
                  element can be a reference to any ConfigMap or Secret, and will
                  be mounted inside the main application container under a dedicated
                  directory containing the ConfigMap or Secret name. Additionally,
                  each file will be passed as a `--config /path/to/secret_or_configmap/key`
                  to the main container args in the order of the entries defined in
                  the AppConfigs list. But bear in mind that for a single AppConfig
                  element containing several files, the order in which those files
                  will be appended to the container args, the main container args
                  cannot be guaranteed. So if you want to pass multiple app-config
                  files, it is recommended to pass one ConfigMap/Secret per app-config
                  file.
                items:
                  properties:
                    kind:
                      description: Type of the existing App Config object, either
                        ConfigMap or Secret
                      enum:
                      - ConfigMap
                      - Secret
                      type: string
                    name:
                      description: Name of an existing App Config object
                      type: string
                  required:
                  - kind
                  - name
                  type: object
                type: array
              backendAuthSecretRef:
                description: Optional Backend Auth Secret Name. A new one will be
                  generated if not set. This Secret is used to set an environment
                  variable named 'APP_CONFIG_backend_auth_keys' in the main container,
                  which takes precedence over any 'backend.auth.keys' field defined
                  in default or custom application configuration files. This is required
                  for service-to-service auth and is shared by all backend plugins.
                properties:
                  key:
                    default: backend-secret
                    description: 'Key in the secret to use for the backend auth. Default
                      value is: backend-secret'
                    type: string
                  name:
                    description: Name of the secret to use for the backend auth
                    type: string
                required:
                - name
                type: object
              dynamicPluginsConfig:
                description: 'Reference to an existing configuration object for Dynamic
                  Plugins. This can be a reference to any ConfigMap or Secret, but
                  the object must have an existing key named: ''dynamic-plugins.yaml'''
                properties:
                  kind:
                    description: Type of the Dynamic Plugins config object, either
                      ConfigMap or Secret
                    enum:
                    - ConfigMap
                    - Secret
                    type: string
                  name:
                    description: Name of the Dynamic Plugins config object
                    type: string
                required:
                - kind
                - name
                type: object
              rawRuntimeConfig:
                description: Raw Runtime Objects configuration
                type: string
              skipLocalDb:
                default: false
                type: boolean
            type: object
          status:
            description: BackstageStatus defines the observed state of Backstage
            properties:
              conditions:
                description: Conditions is the list of conditions describing the state
                  of the runtime
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
